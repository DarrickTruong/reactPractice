React is just the UI. Focuses only on the View (MVC). 
React interacts with a virtual dom. Increases performance. Selectively renders subtrees of nodes upon state changes
React is simple and intuitive
React can be rendered on both client and server side

Why React?
- Declarative 
- Composable - Reusable Modules
- Fast 

JSX 
- JSX is a syntax extension of javascript
- XML syntax - like
- Concise and Faster 

React component
React.createClass({})
    - render: function() in every component
    - render:function () {
        - should not modify component state. does not read or write from document. should return the same thing each time
        - makes server rendering more practical
    }
    - getInitialState - this.state...
    - getDefaultProps
    - propTypes - validation of props
    - mixins
    - statics
    - displayName
React.render  - where to render (body)
    - Examples
        React.render(what to render(Components, code, or html), where to render(document.body, getElementByID, etc))
        React.render(<h1>Hello World</h1>, document.getElementByID("container")) - with JSX
        React.render(React.createElement('h1', null, 'Hello World'), document.getElementByID("container")) - no JSX

React properties (props) - props is to React as attributes are to html

className - Apply css classes to React content with className (not class)


Learn React from Scratch Course
States/Methods 
Mount
    - componentWillMount - only gets called ONCE when the component is loaded BEFORE render method
    - componentDidMount - only gets called ONCE AFTER the render method
Update
    - componentWillReceiveProps - gets called everytime the component is updated, before the render function
    - shouldComponentUpdate - if return is true, render function will be called
    - componentWillUpdate - will get called if shouldComponentUpdate returns true, gets called before render function
    - componentDidUpdate - gets called after render
Unmount
    - componentWillUnmount - 

To call function from <script file> in html
Example
    - in html - <button onClick="renderComponent()">Render</button>
    - in script file - window.renderComponent = function() {
                            React.render(<Component/>, document.getElementByID('container'));
                        }

Props/properties
- Properties are to components what attributes are to html tags
- State is internal to components. properties are external to components
- properties define what the component does

React Events/SyntheticEvents
- Clipboard Events
    - onCopy, onCut, onPaste
- Keyboard Events
    - onKeyDown, onKeyPress, onKeyUp
- Focus Events
    - onFocus, onBlut
- Form Events
    - onSubmit, onChange, onInput
- Mouse Events

    - onClick, onDoubleClick, onDrag, etc
- Touch Events
    - onTouchCancel, onTouchMove, onTouchEnd, onTouchStart
- Wheel Events
    - onWheel

Static Methods
- A way to access functionality before its rendered
- Static methods do not have access to states or properties within components

Accessing dom
- getDOMNode
- refs - a way to give a node an id

Using Gulp to compile and concatonate jsx to js 
- dependencies - npm install --save gulp gulp-concat gulp-react 
-need global install npm install -g gulp-cli

Using Gulp to compile and concatonate jsx to js using browserify
- dependencies - npm install --save browserify reactify vinyl-source-stream watchify gulp-util
